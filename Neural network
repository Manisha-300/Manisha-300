{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a0145678",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-28T17:06:09.187260Z",
     "iopub.status.busy": "2025-08-28T17:06:09.186970Z",
     "iopub.status.idle": "2025-08-28T17:06:11.147582Z",
     "shell.execute_reply": "2025-08-28T17:06:11.146651Z"
    },
    "papermill": {
     "duration": 1.966482,
     "end_time": "2025-08-28T17:06:11.149206",
     "exception": false,
     "start_time": "2025-08-28T17:06:09.182724",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/mnist-digit-recognizer/train.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\n",
    "from matplotlib import pyplot as plt \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5e58e9e5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-28T17:06:11.156763Z",
     "iopub.status.busy": "2025-08-28T17:06:11.156092Z",
     "iopub.status.idle": "2025-08-28T17:06:14.393771Z",
     "shell.execute_reply": "2025-08-28T17:06:14.392912Z"
    },
    "papermill": {
     "duration": 3.242977,
     "end_time": "2025-08-28T17:06:14.395377",
     "exception": false,
     "start_time": "2025-08-28T17:06:11.152400",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data= pd.read_csv('/kaggle/input/mnist-digit-recognizer/train.csv')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "39baac4d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-28T17:06:14.402968Z",
     "iopub.status.busy": "2025-08-28T17:06:14.402641Z",
     "iopub.status.idle": "2025-08-28T17:06:14.432583Z",
     "shell.execute_reply": "2025-08-28T17:06:14.431733Z"
    },
    "papermill": {
     "duration": 0.035335,
     "end_time": "2025-08-28T17:06:14.433974",
     "exception": false,
     "start_time": "2025-08-28T17:06:14.398639",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>label</th>\n",
       "      <th>pixel0</th>\n",
       "      <th>pixel1</th>\n",
       "      <th>pixel2</th>\n",
       "      <th>pixel3</th>\n",
       "      <th>pixel4</th>\n",
       "      <th>pixel5</th>\n",
       "      <th>pixel6</th>\n",
       "      <th>pixel7</th>\n",
       "      <th>pixel8</th>\n",
       "      <th>...</th>\n",
       "      <th>pixel774</th>\n",
       "      <th>pixel775</th>\n",
       "      <th>pixel776</th>\n",
       "      <th>pixel777</th>\n",
       "      <th>pixel778</th>\n",
       "      <th>pixel779</th>\n",
       "      <th>pixel780</th>\n",
       "      <th>pixel781</th>\n",
       "      <th>pixel782</th>\n",
       "      <th>pixel783</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 785 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   label  pixel0  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  \\\n",
       "0      1       0       0       0       0       0       0       0       0   \n",
       "1      0       0       0       0       0       0       0       0       0   \n",
       "2      1       0       0       0       0       0       0       0       0   \n",
       "3      4       0       0       0       0       0       0       0       0   \n",
       "4      0       0       0       0       0       0       0       0       0   \n",
       "\n",
       "   pixel8  ...  pixel774  pixel775  pixel776  pixel777  pixel778  pixel779  \\\n",
       "0       0  ...         0         0         0         0         0         0   \n",
       "1       0  ...         0         0         0         0         0         0   \n",
       "2       0  ...         0         0         0         0         0         0   \n",
       "3       0  ...         0         0         0         0         0         0   \n",
       "4       0  ...         0         0         0         0         0         0   \n",
       "\n",
       "   pixel780  pixel781  pixel782  pixel783  \n",
       "0         0         0         0         0  \n",
       "1         0         0         0         0  \n",
       "2         0         0         0         0  \n",
       "3         0         0         0         0  \n",
       "4         0         0         0         0  \n",
       "\n",
       "[5 rows x 785 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0cd8a8bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-28T17:06:14.441159Z",
     "iopub.status.busy": "2025-08-28T17:06:14.440869Z",
     "iopub.status.idle": "2025-08-28T17:06:15.294784Z",
     "shell.execute_reply": "2025-08-28T17:06:15.294009Z"
    },
    "papermill": {
     "duration": 0.859475,
     "end_time": "2025-08-28T17:06:15.296456",
     "exception": false,
     "start_time": "2025-08-28T17:06:14.436981",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data = np.array(data)\n",
    "m, n = data.shape\n",
    "np.random.shuffle(data) # shuffle before splitting into dev and training sets\n",
    "\n",
    "data_dev = data[0:1000].T\n",
    "Y_dev = data_dev[0]\n",
    "X_dev = data_dev[1:n]\n",
    "X_dev = X_dev / 255.\n",
    "\n",
    "data_train = data[1000:m].T\n",
    "Y_train = data_train[0]\n",
    "X_train = data_train[1:n]\n",
    "X_train = X_train / 255.\n",
    "_,m_train = X_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b0fb543b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-28T17:06:15.304025Z",
     "iopub.status.busy": "2025-08-28T17:06:15.303414Z",
     "iopub.status.idle": "2025-08-28T17:06:15.308968Z",
     "shell.execute_reply": "2025-08-28T17:06:15.308207Z"
    },
    "papermill": {
     "duration": 0.010516,
     "end_time": "2025-08-28T17:06:15.310262",
     "exception": false,
     "start_time": "2025-08-28T17:06:15.299746",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 4, 2, ..., 8, 7, 5])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5b5e8dc9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-28T17:06:15.317453Z",
     "iopub.status.busy": "2025-08-28T17:06:15.317107Z",
     "iopub.status.idle": "2025-08-28T17:06:15.326623Z",
     "shell.execute_reply": "2025-08-28T17:06:15.325755Z"
    },
    "papermill": {
     "duration": 0.014856,
     "end_time": "2025-08-28T17:06:15.328133",
     "exception": false,
     "start_time": "2025-08-28T17:06:15.313277",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def init_params():\n",
    "    W1 = np.random.rand(10, 784) - 0.5\n",
    "    b1 = np.random.rand(10, 1) - 0.5\n",
    "    W2 = np.random.rand(10, 10) - 0.5\n",
    "    b2 = np.random.rand(10, 1) - 0.5\n",
    "    return W1, b1, W2, b2\n",
    "\n",
    "def ReLU(Z):\n",
    "    return np.maximum(Z, 0)\n",
    "\n",
    "def softmax(Z):\n",
    "    A = np.exp(Z) / sum(np.exp(Z))\n",
    "    return A\n",
    "    \n",
    "def forward_prop(W1, b1, W2, b2, X):\n",
    "    Z1 = W1.dot(X) + b1\n",
    "    A1 = ReLU(Z1)\n",
    "    Z2 = W2.dot(A1) + b2\n",
    "    A2 = softmax(Z2)\n",
    "    return Z1, A1, Z2, A2\n",
    "\n",
    "def ReLU_deriv(Z):\n",
    "    return Z > 0\n",
    "\n",
    "def one_hot(Y):\n",
    "    one_hot_Y = np.zeros((Y.size, Y.max() + 1))\n",
    "    one_hot_Y[np.arange(Y.size), Y] = 1\n",
    "    one_hot_Y = one_hot_Y.T\n",
    "    return one_hot_Y\n",
    "\n",
    "def backward_prop(Z1, A1, Z2, A2, W1, W2, X, Y):\n",
    "    one_hot_Y = one_hot(Y)\n",
    "    dZ2 = A2 - one_hot_Y\n",
    "    dW2 = 1 / m * dZ2.dot(A1.T)\n",
    "    db2 = 1 / m * np.sum(dZ2)\n",
    "    dZ1 = W2.T.dot(dZ2) * ReLU_deriv(Z1)\n",
    "    dW1 = 1 / m * dZ1.dot(X.T)\n",
    "    db1 = 1 / m * np.sum(dZ1)\n",
    "    return dW1, db1, dW2, db2\n",
    "\n",
    "def update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha):\n",
    "    W1 = W1 - alpha * dW1\n",
    "    b1 = b1 - alpha * db1    \n",
    "    W2 = W2 - alpha * dW2  \n",
    "    b2 = b2 - alpha * db2    \n",
    "    return W1, b1, W2, b2\n",
    "    \n",
    "                       "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7c5be768",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-28T17:06:15.335547Z",
     "iopub.status.busy": "2025-08-28T17:06:15.335277Z",
     "iopub.status.idle": "2025-08-28T17:06:15.341706Z",
     "shell.execute_reply": "2025-08-28T17:06:15.340883Z"
    },
    "papermill": {
     "duration": 0.011752,
     "end_time": "2025-08-28T17:06:15.343139",
     "exception": false,
     "start_time": "2025-08-28T17:06:15.331387",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_predictions(A2):\n",
    "    return np.argmax(A2, 0)\n",
    "\n",
    "def get_accuracy(predictions, Y):\n",
    "    print(predictions, Y)\n",
    "    return np.sum(predictions == Y) / Y.size\n",
    "\n",
    "def gradient_descent(X, Y, alpha, iterations):\n",
    "    W1, b1, W2, b2 = init_params()\n",
    "    for i in range(iterations):\n",
    "        Z1, A1, Z2, A2 = forward_prop(W1, b1, W2, b2, X)\n",
    "        dW1, db1, dW2, db2 = backward_prop(Z1, A1, Z2, A2, W1, W2, X, Y)\n",
    "        W1, b1, W2, b2 = update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha)\n",
    "        if i % 10 == 0:\n",
    "            print(\"Iteration: \", i)\n",
    "            predictions = get_predictions(A2)\n",
    "            print(get_accuracy(predictions, Y))\n",
    "    return W1, b1, W2, b2\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "658df9e1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-28T17:06:15.350097Z",
     "iopub.status.busy": "2025-08-28T17:06:15.349783Z",
     "iopub.status.idle": "2025-08-28T17:06:49.373223Z",
     "shell.execute_reply": "2025-08-28T17:06:49.372547Z"
    },
    "papermill": {
     "duration": 34.028561,
     "end_time": "2025-08-28T17:06:49.374717",
     "exception": false,
     "start_time": "2025-08-28T17:06:15.346156",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration:  0\n",
      "[2 9 4 ... 2 9 5] [0 4 2 ... 8 7 5]\n",
      "0.09965853658536586\n",
      "Iteration:  10\n",
      "[0 5 4 ... 2 9 5] [0 4 2 ... 8 7 5]\n",
      "0.16334146341463415\n",
      "Iteration:  20\n",
      "[0 5 6 ... 2 2 5] [0 4 2 ... 8 7 5]\n",
      "0.2755609756097561\n",
      "Iteration:  30\n",
      "[0 6 6 ... 2 9 5] [0 4 2 ... 8 7 5]\n",
      "0.37246341463414634\n",
      "Iteration:  40\n",
      "[0 6 6 ... 6 9 5] [0 4 2 ... 8 7 5]\n",
      "0.45007317073170733\n",
      "Iteration:  50\n",
      "[0 6 6 ... 6 9 5] [0 4 2 ... 8 7 5]\n",
      "0.5088292682926829\n",
      "Iteration:  60\n",
      "[0 6 6 ... 6 9 5] [0 4 2 ... 8 7 5]\n",
      "0.5571707317073171\n",
      "Iteration:  70\n",
      "[0 6 2 ... 6 9 5] [0 4 2 ... 8 7 5]\n",
      "0.5984634146341463\n",
      "Iteration:  80\n",
      "[0 6 2 ... 3 9 5] [0 4 2 ... 8 7 5]\n",
      "0.6310975609756098\n",
      "Iteration:  90\n",
      "[0 6 2 ... 3 9 5] [0 4 2 ... 8 7 5]\n",
      "0.6578780487804878\n",
      "Iteration:  100\n",
      "[0 4 2 ... 3 9 5] [0 4 2 ... 8 7 5]\n",
      "0.6797560975609757\n",
      "Iteration:  110\n",
      "[0 4 2 ... 3 9 5] [0 4 2 ... 8 7 5]\n",
      "0.6979756097560975\n",
      "Iteration:  120\n",
      "[0 4 2 ... 3 9 5] [0 4 2 ... 8 7 5]\n",
      "0.7126341463414634\n",
      "Iteration:  130\n",
      "[0 4 2 ... 3 7 5] [0 4 2 ... 8 7 5]\n",
      "0.7259268292682927\n",
      "Iteration:  140\n",
      "[0 4 2 ... 3 7 5] [0 4 2 ... 8 7 5]\n",
      "0.7378536585365854\n",
      "Iteration:  150\n",
      "[0 4 2 ... 3 7 5] [0 4 2 ... 8 7 5]\n",
      "0.748219512195122\n",
      "Iteration:  160\n",
      "[0 4 2 ... 2 7 5] [0 4 2 ... 8 7 5]\n",
      "0.7570975609756098\n",
      "Iteration:  170\n",
      "[0 4 2 ... 2 7 5] [0 4 2 ... 8 7 5]\n",
      "0.7645365853658537\n",
      "Iteration:  180\n",
      "[0 4 2 ... 2 7 5] [0 4 2 ... 8 7 5]\n",
      "0.7711707317073171\n",
      "Iteration:  190\n",
      "[0 4 2 ... 2 7 5] [0 4 2 ... 8 7 5]\n",
      "0.7777560975609756\n",
      "Iteration:  200\n",
      "[0 4 2 ... 2 7 5] [0 4 2 ... 8 7 5]\n",
      "0.7826585365853659\n",
      "Iteration:  210\n",
      "[0 4 2 ... 2 7 5] [0 4 2 ... 8 7 5]\n",
      "0.7867073170731708\n",
      "Iteration:  220\n",
      "[0 4 2 ... 2 7 5] [0 4 2 ... 8 7 5]\n",
      "0.7913414634146342\n",
      "Iteration:  230\n",
      "[0 4 2 ... 2 7 5] [0 4 2 ... 8 7 5]\n",
      "0.7955609756097561\n",
      "Iteration:  240\n",
      "[0 4 2 ... 2 7 5] [0 4 2 ... 8 7 5]\n",
      "0.7996585365853659\n",
      "Iteration:  250\n",
      "[0 4 2 ... 2 7 5] [0 4 2 ... 8 7 5]\n",
      "0.8033170731707318\n",
      "Iteration:  260\n",
      "[0 4 2 ... 2 7 5] [0 4 2 ... 8 7 5]\n",
      "0.8065121951219513\n",
      "Iteration:  270\n",
      "[0 4 2 ... 2 7 5] [0 4 2 ... 8 7 5]\n",
      "0.8099024390243903\n",
      "Iteration:  280\n",
      "[0 4 2 ... 2 7 5] [0 4 2 ... 8 7 5]\n",
      "0.8123902439024391\n",
      "Iteration:  290\n",
      "[0 4 2 ... 2 7 5] [0 4 2 ... 8 7 5]\n",
      "0.815\n",
      "Iteration:  300\n",
      "[0 4 2 ... 2 7 5] [0 4 2 ... 8 7 5]\n",
      "0.818\n",
      "Iteration:  310\n",
      "[0 4 2 ... 2 7 5] [0 4 2 ... 8 7 5]\n",
      "0.8201951219512195\n",
      "Iteration:  320\n",
      "[0 4 2 ... 2 7 5] [0 4 2 ... 8 7 5]\n",
      "0.8221951219512195\n",
      "Iteration:  330\n",
      "[0 4 2 ... 2 7 5] [0 4 2 ... 8 7 5]\n",
      "0.8246097560975609\n",
      "Iteration:  340\n",
      "[0 4 2 ... 2 7 5] [0 4 2 ... 8 7 5]\n",
      "0.8269512195121951\n",
      "Iteration:  350\n",
      "[0 4 2 ... 2 7 5] [0 4 2 ... 8 7 5]\n",
      "0.8287073170731707\n",
      "Iteration:  360\n",
      "[0 4 2 ... 2 7 5] [0 4 2 ... 8 7 5]\n",
      "0.8308048780487804\n",
      "Iteration:  370\n",
      "[0 4 2 ... 2 7 5] [0 4 2 ... 8 7 5]\n",
      "0.8324390243902439\n",
      "Iteration:  380\n",
      "[0 4 2 ... 2 7 5] [0 4 2 ... 8 7 5]\n",
      "0.8341951219512195\n",
      "Iteration:  390\n",
      "[0 4 2 ... 2 7 5] [0 4 2 ... 8 7 5]\n",
      "0.836\n",
      "Iteration:  400\n",
      "[0 4 2 ... 2 7 5] [0 4 2 ... 8 7 5]\n",
      "0.8376097560975609\n",
      "Iteration:  410\n",
      "[0 4 2 ... 8 7 5] [0 4 2 ... 8 7 5]\n",
      "0.839390243902439\n",
      "Iteration:  420\n",
      "[0 4 2 ... 8 7 5] [0 4 2 ... 8 7 5]\n",
      "0.8404390243902439\n",
      "Iteration:  430\n",
      "[0 4 2 ... 8 7 5] [0 4 2 ... 8 7 5]\n",
      "0.8418780487804878\n",
      "Iteration:  440\n",
      "[0 4 2 ... 8 7 5] [0 4 2 ... 8 7 5]\n",
      "0.8433170731707317\n",
      "Iteration:  450\n",
      "[0 4 2 ... 8 7 5] [0 4 2 ... 8 7 5]\n",
      "0.844780487804878\n",
      "Iteration:  460\n",
      "[0 4 2 ... 8 7 5] [0 4 2 ... 8 7 5]\n",
      "0.8459756097560975\n",
      "Iteration:  470\n",
      "[0 4 2 ... 8 7 5] [0 4 2 ... 8 7 5]\n",
      "0.8472439024390244\n",
      "Iteration:  480\n",
      "[0 4 2 ... 8 7 5] [0 4 2 ... 8 7 5]\n",
      "0.848390243902439\n",
      "Iteration:  490\n",
      "[0 4 2 ... 8 7 5] [0 4 2 ... 8 7 5]\n",
      "0.8498780487804878\n"
     ]
    }
   ],
   "source": [
    "W1, b1, W2, b2 = gradient_descent(X_train, Y_train, 0.10, 500)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5a3ef9f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-28T17:06:49.386289Z",
     "iopub.status.busy": "2025-08-28T17:06:49.385747Z",
     "iopub.status.idle": "2025-08-28T17:06:49.391625Z",
     "shell.execute_reply": "2025-08-28T17:06:49.390570Z"
    },
    "papermill": {
     "duration": 0.012912,
     "end_time": "2025-08-28T17:06:49.392921",
     "exception": false,
     "start_time": "2025-08-28T17:06:49.380009",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def make_predictions(X, W1, b1, W2, b2):\n",
    "    _, _, _, A2 = forward_prop(W1, b1, W2, b2, X)\n",
    "    predictions = get_predictions(A2)\n",
    "    return predictions\n",
    "\n",
    "def test_prediction(index, W1, b1, W2, b2):\n",
    "    current_image = X_train[:, index, None]\n",
    "    prediction = make_predictions(X_train[:, index, None], W1, b1, W2, b2)\n",
    "    label = Y_train[index]\n",
    "    print(\"Prediction: \", prediction)\n",
    "    print(\"Label: \", label)\n",
    "    \n",
    "    current_image = current_image.reshape((28, 28)) * 255\n",
    "    plt.gray()\n",
    "    plt.imshow(current_image, interpolation='nearest')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "9f5039e4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-28T17:06:49.404202Z",
     "iopub.status.busy": "2025-08-28T17:06:49.403943Z",
     "iopub.status.idle": "2025-08-28T17:06:50.000156Z",
     "shell.execute_reply": "2025-08-28T17:06:49.999306Z"
    },
    "papermill": {
     "duration": 0.603457,
     "end_time": "2025-08-28T17:06:50.001506",
     "exception": false,
     "start_time": "2025-08-28T17:06:49.398049",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction:  [0]\n",
      "Label:  0\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction:  [4]\n",
      "Label:  4\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction:  [2]\n",
      "Label:  2\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAaAAAAGdCAYAAABU0qcqAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAAAbyUlEQVR4nO3df2yV9fn/8dfhR48o7WGltqeVAuWHsoigMug6taJ0lLo4QebQ+QcsDkWLGTB16VTQadIPbJlEw3BZFphRQDEC0SwkWGybbS2GAiFkW6WkGyW0ZTbhnNJKIfT9/YOvZx4p4H04p9c55flI3gnnvu/r3FdvbvriPvfdd33OOScAAPrZIOsGAABXJwIIAGCCAAIAmCCAAAAmCCAAgAkCCABgggACAJgggAAAJoZYN/B1vb29On78uNLT0+Xz+azbAQB45JxTZ2en8vLyNGjQxa9zki6Ajh8/rvz8fOs2AABXqKWlRaNGjbro+qT7CC49Pd26BQBAHFzu+3nCAmjdunUaO3asrrnmGhUWFurTTz/9RnV87AYAA8Plvp8nJIDeffddrVixQqtWrdK+ffs0depUlZaW6sSJE4nYHQAgFbkEmDFjhisvL4+8PnfunMvLy3OVlZWXrQ2FQk4Sg8FgMFJ8hEKhS36/j/sV0JkzZ9TQ0KCSkpLIskGDBqmkpER1dXUXbN/T06NwOBw1AAADX9wD6PPPP9e5c+eUk5MTtTwnJ0dtbW0XbF9ZWalAIBAZPAEHAFcH86fgKioqFAqFIqOlpcW6JQBAP4j7zwFlZWVp8ODBam9vj1re3t6uYDB4wfZ+v19+vz/ebQAAklzcr4DS0tI0bdo0VVVVRZb19vaqqqpKRUVF8d4dACBFJWQmhBUrVmjhwoX6zne+oxkzZmjt2rXq6urST3/600TsDgCQghISQAsWLNB///tfrVy5Um1tbbr11lu1c+fOCx5MAABcvXzOOWfdxFeFw2EFAgHrNgAAVygUCikjI+Oi682fggMAXJ0IIACACQIIAGCCAAIAmCCAAAAmCCAAgAkCCABgggACAJgggAAAJgggAIAJAggAYIIAAgCYIIAAACYIIACACQIIAGCCAAIAmCCAAAAmCCAAgAkCCABgggACAJgggAAAJgggAIAJAggAYIIAAgCYIIAAACYIIACAiSHWDQBXo/z8fM81u3bt8lwzceJEzzWStG/fPs8106dPj2lfuHpxBQQAMEEAAQBMEEAAABMEEADABAEEADBBAAEATBBAAAATBBAAwAQBBAAwQQABAEwQQAAAEwQQAMAEk5ECBlavXu25ZsKECZ5rnHOeayTptttu81zz7rvveq557bXXPNfU19d7rkFy4goIAGCCAAIAmCCAAAAmCCAAgAkCCABgggACAJgggAAAJgggAIAJAggAYIIAAgCYIIAAACYIIACACSYjBa7QypUrPdcsWLDAc02sE4v2lx/96Eeea7Zu3ZqATpAquAICAJgggAAAJuIeQC+99JJ8Pl/UmDRpUrx3AwBIcQm5B3TzzTfr448//t9OhnCrCQAQLSHJMGTIEAWDwUS8NQBggEjIPaDDhw8rLy9P48aN06OPPqqjR49edNuenh6Fw+GoAQAY+OIeQIWFhdq4caN27typ9evXq7m5WXfddZc6Ozv73L6yslKBQCAy8vPz490SACAJxT2AysrK9NBDD2nKlCkqLS3VX/7yF508eVLvvfden9tXVFQoFApFRktLS7xbAgAkoYQ/HTBixAjdeOONampq6nO93++X3+9PdBsAgCST8J8DOnXqlI4cOaLc3NxE7woAkELiHkDPPPOMampq9O9//1t///vfNW/ePA0ePFiPPPJIvHcFAEhhcf8I7tixY3rkkUfU0dGh66+/Xnfeeafq6+t1/fXXx3tXAIAUFvcA2rJlS7zfEug3sUws+vzzzyegE2DgYy44AIAJAggAYIIAAgCYIIAAACYIIACACQIIAGCCAAIAmCCAAAAmCCAAgAkCCABgggACAJgggAAAJhL+C+kAC2PHjo2p7oknnvBcM2SI939GPp/Pc01HR4fnmn379nmukaTvf//7nmti+Zpuv/12zzXvv/++5xokJ66AAAAmCCAAgAkCCABgggACAJgggAAAJgggAIAJAggAYIIAAgCYIIAAACYIIACACQIIAGCCAAIAmCCAAAAmmA0bA1JnZ2dMdY2NjZ5rcnJyPNfs2rXLc83PfvYzzzVFRUWeaySppKQkpjqvYp2tGwMDV0AAABMEEADABAEEADBBAAEATBBAAAATBBAAwAQBBAAwQQABAEwQQAAAEwQQAMAEAQQAMEEAAQBMMBkpBqSOjo6Y6h566CHPNRMnTvRcU19f77kmFgsWLOiX/UhSd3e355pjx44loBOkCq6AAAAmCCAAgAkCCABgggACAJgggAAAJgggAIAJAggAYIIAAgCYIIAAACYIIACACQIIAGCCAAIAmGAyUuArYpnENJaa9PR0zzXbtm3zXPO9733Pc02sHn74Yc81/TUpK5ITV0AAABMEEADAhOcAqq2t1f3336+8vDz5fD5t3749ar1zTitXrlRubq6GDRumkpISHT58OF79AgAGCM8B1NXVpalTp2rdunV9rl+zZo1ef/11vfnmm9qzZ4+uu+46lZaW6vTp01fcLABg4PD8EEJZWZnKysr6XOec09q1a/XCCy/ogQcekCS99dZbysnJ0fbt22O6SQkAGJjieg+oublZbW1tKikpiSwLBAIqLCxUXV1dnzU9PT0Kh8NRAwAw8MU1gNra2iRJOTk5UctzcnIi676usrJSgUAgMvLz8+PZEgAgSZk/BVdRUaFQKBQZLS0t1i0BAPpBXAMoGAxKktrb26OWt7e3R9Z9nd/vV0ZGRtQAAAx8cQ2ggoICBYNBVVVVRZaFw2Ht2bNHRUVF8dwVACDFeX4K7tSpU2pqaoq8bm5u1oEDB5SZmanRo0dr2bJlevXVVzVx4kQVFBToxRdfVF5enubOnRvPvgEAKc5zAO3du1f33HNP5PWKFSskSQsXLtTGjRv13HPPqaurS48//rhOnjypO++8Uzt37tQ111wTv64BACnP55xz1k18VTgcViAQsG4DSKhYJiOtra31XDNlyhTPNbEaPHhwv+0LqSEUCl3yvr75U3AAgKsTAQQAMEEAAQBMEEAAABMEEADABAEEADBBAAEATBBAAAATBBAAwAQBBAAwQQABAEwQQAAAEwQQAMCE51/HAODKpaWlea7JzMz0XBPrZPetra0x1QFecAUEADBBAAEATBBAAAATBBAAwAQBBAAwQQABAEwQQAAAEwQQAMAEAQQAMEEAAQBMEEAAABMEEADABJORIundeuutnms+//zzmPZ17NixmOq8qqys9Fxzww03JKCTvr366qv9ti9cvbgCAgCYIIAAACYIIACACQIIAGCCAAIAmCCAAAAmCCAAgAkCCABgggACAJgggAAAJgggAIAJAggAYILJSNGvFi9e7Lnmt7/9reeanp4ezzWS9P7773uueeqppzzX3HbbbZ5rYvHZZ5/FVLdly5Y4dwJciCsgAIAJAggAYIIAAgCYIIAAACYIIACACQIIAGCCAAIAmCCAAAAmCCAAgAkCCABgggACAJgggAAAJpiMFPL7/THVvfHGG55rHnvsMc81Pp/Pc83w4cM910jSvffe67nmk08+8Vwzbdo0zzXOOc81sfwdSVIoFIqpDvCCKyAAgAkCCABgwnMA1dbW6v7771deXp58Pp+2b98etX7RokXy+XxRY86cOfHqFwAwQHgOoK6uLk2dOlXr1q276DZz5sxRa2trZGzevPmKmgQADDyeH0IoKytTWVnZJbfx+/0KBoMxNwUAGPgScg+ourpa2dnZuummm/Tkk0+qo6Pjotv29PQoHA5HDQDAwBf3AJozZ47eeustVVVVafXq1aqpqVFZWZnOnTvX5/aVlZUKBAKRkZ+fH++WAABJKO4/B/Twww9H/nzLLbdoypQpGj9+vKqrqzVr1qwLtq+oqNCKFSsir8PhMCEEAFeBhD+GPW7cOGVlZampqanP9X6/XxkZGVEDADDwJTyAjh07po6ODuXm5iZ6VwCAFOL5I7hTp05FXc00NzfrwIEDyszMVGZmpl5++WXNnz9fwWBQR44c0XPPPacJEyaotLQ0ro0DAFKb5wDau3ev7rnnnsjrL+/fLFy4UOvXr9fBgwf15z//WSdPnlReXp5mz56tV155Jeb5xgAAA5PPxTLDYQKFw2EFAgHrNq4qr7zySkx1FRUVce6kb7FMRppkp/UFYvmaqqurPdf8+Mc/9lwj6ZI/OgF8U6FQ6JL39ZkLDgBgggACAJgggAAAJgggAIAJAggAYIIAAgCYIIAAACYIIACACQIIAGCCAAIAmCCAAAAmCCAAgAkCCABgIu6/khu27rzzTs81TzzxRAI66VssM2/v37/fc80HH3zguaY/nTp1ynPNV391/TfFrNapYdasWZ5r6urqYtpXd3d3THWJwBUQAMAEAQQAMEEAAQBMEEAAABMEEADABAEEADBBAAEATBBAAAATBBAAwAQBBAAwQQABAEwQQAAAE0xGOsDMmzfPc01mZmZM+/rss88816xdu9Zzzdtvv+25JtkNHz7cc82uXbs812zYsMFzjSS1tbV5rqmtrfVc09DQ4LkmFtOmTYuprri42HNNbm6u55qlS5d6rvn4448910jSD3/4w5jqEoErIACACQIIAGCCAAIAmCCAAAAmCCAAgAkCCABgggACAJgggAAAJgggAIAJAggAYIIAAgCYIIAAACZ8zjln3cRXhcNhBQIB6zZSVix/nb29vQnopG/79u3zXBPLRJKxntbd3d2ea9asWeO55uWXX/Zck2T/VC/g8/k81/A1nRfLeRfrZKSxTFgcq1AopIyMjIuu5woIAGCCAAIAmCCAAAAmCCAAgAkCCABgggACAJgggAAAJgggAIAJAggAYIIAAgCYIIAAACYIIACAiSHWDSC+YplYtD8nhLzttts818TSX2Njo+caSXr++ec912zbts1zzbFjxzzXrF692nNNZmam55r+lOyTkcYilnOvv867ZMMVEADABAEEADDhKYAqKys1ffp0paenKzs7W3Pnzr3gcvP06dMqLy/XyJEjNXz4cM2fP1/t7e1xbRoAkPo8BVBNTY3Ky8tVX1+vXbt26ezZs5o9e7a6uroi2yxfvlwffvihtm7dqpqaGh0/flwPPvhg3BsHAKQ2Tw8h7Ny5M+r1xo0blZ2drYaGBhUXFysUCulPf/qTNm3apHvvvVeStGHDBn37299WfX29vvvd78avcwBASruie0ChUEjS/560aWho0NmzZ1VSUhLZZtKkSRo9erTq6ur6fI+enh6Fw+GoAQAY+GIOoN7eXi1btkx33HGHJk+eLElqa2tTWlqaRowYEbVtTk6O2tra+nyfyspKBQKByMjPz4+1JQBACok5gMrLy3Xo0CFt2bLlihqoqKhQKBSKjJaWlit6PwBAaojpB1GXLl2qjz76SLW1tRo1alRkeTAY1JkzZ3Ty5Mmoq6D29nYFg8E+38vv98vv98fSBgAghXm6AnLOaenSpdq2bZt2796tgoKCqPXTpk3T0KFDVVVVFVnW2Nioo0ePqqioKD4dAwAGBE9XQOXl5dq0aZN27Nih9PT0yH2dQCCgYcOGKRAI6LHHHtOKFSuUmZmpjIwMPf300yoqKuIJOABAFE8BtH79eknSzJkzo5Zv2LBBixYtkiS99tprGjRokObPn6+enh6Vlpbq97//fVyaBQAMHD6XZLMBhsNhBQIB6zZS1ksvveS55oUXXoh/I3F08OBBzzV//OMfY9rXl//JSkY33nij55r+nIz07rvv9lwTy7ef22+/3XNNrNauXeu55vDhw55rOjo6PNekglAopIyMjIuuZy44AIAJAggAYIIAAgCYIIAAACYIIACACQIIAGCCAAIAmCCAAAAmCCAAgAkCCABgggACAJgggAAAJgggAIAJZsMeYIYM8f5Lbj/44IOY9nXfffd5rolllurnnnvOc01nZ6fnGgDxxWzYAICkRAABAEwQQAAAEwQQAMAEAQQAMEEAAQBMEEAAABMEEADABAEEADBBAAEATBBAAAATBBAAwASTkQIAEoLJSAEASYkAAgCYIIAAACYIIACACQIIAGCCAAIAmCCAAAAmCCAAgAkCCABgggACAJgggAAAJgggAIAJAggAYIIAAgCYIIAAACYIIACACQIIAGCCAAIAmCCAAAAmCCAAgAkCCABgggACAJgggAAAJgggAIAJAggAYIIAAgCYIIAAACYIIACACU8BVFlZqenTpys9PV3Z2dmaO3euGhsbo7aZOXOmfD5f1FiyZElcmwYApD5PAVRTU6Py8nLV19dr165dOnv2rGbPnq2urq6o7RYvXqzW1tbIWLNmTVybBgCkviFeNt65c2fU640bNyo7O1sNDQ0qLi6OLL/22msVDAbj0yEAYEC6ontAoVBIkpSZmRm1/J133lFWVpYmT56siooKdXd3X/Q9enp6FA6HowYA4CrgYnTu3Dn3gx/8wN1xxx1Ry//whz+4nTt3uoMHD7q3337b3XDDDW7evHkXfZ9Vq1Y5SQwGg8EYYCMUCl0yR2IOoCVLlrgxY8a4lpaWS25XVVXlJLmmpqY+158+fdqFQqHIaGlpMT9oDAaDwbjycbkA8nQP6EtLly7VRx99pNraWo0aNeqS2xYWFkqSmpqaNH78+AvW+/1++f3+WNoAAKQwTwHknNPTTz+tbdu2qbq6WgUFBZetOXDggCQpNzc3pgYBAAOTpwAqLy/Xpk2btGPHDqWnp6utrU2SFAgENGzYMB05ckSbNm3Sfffdp5EjR+rgwYNavny5iouLNWXKlIR8AQCAFOXlvo8u8jnfhg0bnHPOHT161BUXF7vMzEzn9/vdhAkT3LPPPnvZzwG/KhQKmX9uyWAwGIwrH5f73u/7/8GSNMLhsAKBgHUbAIArFAqFlJGRcdH1zAUHADBBAAEATBBAAAATBBAAwAQBBAAwQQABAEwQQAAAEwQQAMAEAQQAMEEAAQBMEEAAABMEEADABAEEADBBAAEATBBAAAATBBAAwAQBBAAwQQABAEwQQAAAEwQQAMAEAQQAMEEAAQBMEEAAABMEEADABAEEADCRdAHknLNuAQAQB5f7fp50AdTZ2WndAgAgDi73/dznkuySo7e3V8ePH1d6erp8Pl/UunA4rPz8fLW0tCgjI8OoQ3sch/M4DudxHM7jOJyXDMfBOafOzk7l5eVp0KCLX+cM6ceevpFBgwZp1KhRl9wmIyPjqj7BvsRxOI/jcB7H4TyOw3nWxyEQCFx2m6T7CA4AcHUggAAAJlIqgPx+v1atWiW/32/diimOw3kch/M4DudxHM5LpeOQdA8hAACuDil1BQQAGDgIIACACQIIAGCCAAIAmEiZAFq3bp3Gjh2ra665RoWFhfr000+tW+p3L730knw+X9SYNGmSdVsJV1tbq/vvv195eXny+Xzavn171HrnnFauXKnc3FwNGzZMJSUlOnz4sE2zCXS547Bo0aILzo85c+bYNJsglZWVmj59utLT05Wdna25c+eqsbExapvTp0+rvLxcI0eO1PDhwzV//ny1t7cbdZwY3+Q4zJw584LzYcmSJUYd9y0lAujdd9/VihUrtGrVKu3bt09Tp05VaWmpTpw4Yd1av7v55pvV2toaGX/961+tW0q4rq4uTZ06VevWretz/Zo1a/T666/rzTff1J49e3TdddeptLRUp0+f7udOE+tyx0GS5syZE3V+bN68uR87TLyamhqVl5ervr5eu3bt0tmzZzV79mx1dXVFtlm+fLk+/PBDbd26VTU1NTp+/LgefPBBw67j75scB0lavHhx1PmwZs0ao44vwqWAGTNmuPLy8sjrc+fOuby8PFdZWWnYVf9btWqVmzp1qnUbpiS5bdu2RV739va6YDDofvOb30SWnTx50vn9frd582aDDvvH14+Dc84tXLjQPfDAAyb9WDlx4oST5Gpqapxz5//uhw4d6rZu3RrZ5p///KeT5Orq6qzaTLivHwfnnLv77rvdz3/+c7umvoGkvwI6c+aMGhoaVFJSElk2aNAglZSUqK6uzrAzG4cPH1ZeXp7GjRunRx99VEePHrVuyVRzc7Pa2tqizo9AIKDCwsKr8vyorq5Wdna2brrpJj355JPq6OiwbimhQqGQJCkzM1OS1NDQoLNnz0adD5MmTdLo0aMH9Pnw9ePwpXfeeUdZWVmaPHmyKioq1N3dbdHeRSXdZKRf9/nnn+vcuXPKycmJWp6Tk6N//etfRl3ZKCws1MaNG3XTTTeptbVVL7/8su666y4dOnRI6enp1u2ZaGtrk6Q+z48v110t5syZowcffFAFBQU6cuSIfvWrX6msrEx1dXUaPHiwdXtx19vbq2XLlumOO+7Q5MmTJZ0/H9LS0jRixIiobQfy+dDXcZCkn/zkJxozZozy8vJ08OBB/fKXv1RjY6M++OADw26jJX0A4X/Kysoif54yZYoKCws1ZswYvffee3rssccMO0MyePjhhyN/vuWWWzRlyhSNHz9e1dXVmjVrlmFniVFeXq5Dhw5dFfdBL+Vix+Hxxx+P/PmWW25Rbm6uZs2apSNHjmj8+PH93Wafkv4juKysLA0ePPiCp1ja29sVDAaNukoOI0aM0I033qimpibrVsx8eQ5wflxo3LhxysrKGpDnx9KlS/XRRx/pk08+ifr1LcFgUGfOnNHJkyejth+o58PFjkNfCgsLJSmpzoekD6C0tDRNmzZNVVVVkWW9vb2qqqpSUVGRYWf2Tp06pSNHjig3N9e6FTMFBQUKBoNR50c4HNaePXuu+vPj2LFj6ujoGFDnh3NOS5cu1bZt27R7924VFBRErZ82bZqGDh0adT40Njbq6NGjA+p8uNxx6MuBAwckKbnOB+unIL6JLVu2OL/f7zZu3Oj+8Y9/uMcff9yNGDHCtbW1WbfWr37xi1+46upq19zc7P72t7+5kpISl5WV5U6cOGHdWkJ1dna6/fv3u/379ztJ7ne/+53bv3+/+89//uOcc+7//u//3IgRI9yOHTvcwYMH3QMPPOAKCgrcF198Ydx5fF3qOHR2drpnnnnG1dXVuebmZvfxxx+722+/3U2cONGdPn3auvW4efLJJ10gEHDV1dWutbU1Mrq7uyPbLFmyxI0ePdrt3r3b7d271xUVFbmioiLDruPvcsehqanJ/frXv3Z79+51zc3NbseOHW7cuHGuuLjYuPNoKRFAzjn3xhtvuNGjR7u0tDQ3Y8YMV19fb91Sv1uwYIHLzc11aWlp7oYbbnALFixwTU1N1m0l3CeffOIkXTAWLlzonDv/KPaLL77ocnJynN/vd7NmzXKNjY22TSfApY5Dd3e3mz17trv++uvd0KFD3ZgxY9zixYsH3H/S+vr6JbkNGzZEtvniiy/cU0895b71rW+5a6+91s2bN8+1trbaNZ0AlzsOR48edcXFxS4zM9P5/X43YcIE9+yzz7pQKGTb+Nfw6xgAACaS/h4QAGBgIoAAACYIIACACQIIAGCCAAIAmCCAAAAmCCAAgAkCCABgggACAJgggAAAJgggAIAJAggAYOL/ASIJ6oWq3UgZAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction:  [5]\n",
      "Label:  5\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "test_prediction(0, W1, b1, W2, b2)\n",
    "test_prediction(1, W1, b1, W2, b2)\n",
    "test_prediction(2, W1, b1, W2, b2)\n",
    "test_prediction(3, W1, b1, W2, b2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e29afcab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-28T17:06:50.014944Z",
     "iopub.status.busy": "2025-08-28T17:06:50.014623Z",
     "iopub.status.idle": "2025-08-28T17:06:50.024602Z",
     "shell.execute_reply": "2025-08-28T17:06:50.023613Z"
    },
    "papermill": {
     "duration": 0.018402,
     "end_time": "2025-08-28T17:06:50.026171",
     "exception": false,
     "start_time": "2025-08-28T17:06:50.007769",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[6 7 6 0 8 4 3 0 9 3 0 7 0 4 5 8 2 7 1 4 5 1 4 2 5 1 3 4 5 3 0 3 4 9 6 7 4\n",
      " 9 6 4 7 8 1 6 0 8 5 8 2 0 4 3 9 2 9 4 6 5 7 6 2 1 6 8 9 1 8 4 2 6 8 4 3 8\n",
      " 0 0 0 6 6 0 7 3 7 7 1 9 3 0 3 3 9 1 2 9 8 1 1 0 3 3 9 9 6 9 2 0 8 3 4 9 3\n",
      " 2 3 8 3 4 1 5 6 7 9 2 9 3 0 4 1 5 1 0 2 1 0 0 3 9 8 1 1 3 4 6 1 1 0 8 1 3\n",
      " 9 5 8 8 1 0 7 9 3 5 3 5 3 2 8 4 8 0 7 8 1 9 0 6 8 6 2 1 1 0 8 6 1 8 7 5 0\n",
      " 2 0 8 3 4 9 9 6 4 8 5 1 2 1 1 0 7 9 5 0 0 2 7 9 9 7 6 1 3 9 8 1 9 6 1 3 1\n",
      " 8 9 5 6 5 3 9 4 8 7 1 2 2 3 7 9 9 0 8 9 5 2 7 5 2 6 3 8 5 4 3 3 2 7 2 6 2\n",
      " 1 5 1 4 9 7 0 3 6 1 5 2 5 5 0 0 8 3 9 4 8 5 2 3 4 9 3 4 5 7 0 5 2 9 3 1 1\n",
      " 6 3 6 4 2 5 9 8 2 6 1 8 9 7 7 9 7 1 4 6 4 9 4 4 0 2 0 4 0 9 8 6 8 6 1 3 6\n",
      " 8 4 3 9 2 3 0 4 7 0 0 1 9 6 4 4 4 3 6 3 0 4 2 3 5 9 0 0 3 0 9 0 6 6 3 7 4\n",
      " 8 6 9 5 8 5 2 9 7 0 8 4 1 5 3 9 4 5 8 2 8 4 2 5 8 6 2 2 8 5 4 0 6 7 5 0 7\n",
      " 5 6 0 5 5 1 3 0 7 3 0 2 1 5 6 0 3 2 0 5 8 8 5 9 0 2 6 3 1 8 5 9 3 1 2 1 7\n",
      " 0 3 4 6 0 4 2 1 4 7 0 6 1 8 3 8 5 1 5 2 9 4 1 5 8 0 5 7 0 5 2 7 6 2 6 4 9\n",
      " 1 3 7 1 5 4 2 9 6 7 0 5 7 5 2 2 3 5 2 9 1 9 2 4 4 8 0 2 8 1 5 8 0 6 2 6 7\n",
      " 4 7 9 0 7 7 1 0 4 4 0 2 6 6 0 9 9 2 7 6 6 8 7 2 2 2 9 0 5 0 1 5 3 8 8 7 9\n",
      " 3 1 1 4 1 5 9 2 2 8 5 0 9 3 8 3 4 5 9 7 8 6 0 3 3 4 4 5 6 3 2 2 5 5 9 2 5\n",
      " 5 0 7 4 5 4 9 0 7 6 8 4 4 1 9 4 8 8 5 5 2 7 2 9 2 1 2 3 2 1 7 3 9 1 5 0 9\n",
      " 1 7 0 6 9 4 7 9 9 4 4 7 4 1 9 2 6 7 5 1 5 1 3 9 4 7 2 5 8 4 8 1 1 9 3 3 1\n",
      " 8 6 3 1 2 0 3 3 3 5 7 1 6 0 9 2 9 8 1 2 6 3 9 4 0 0 8 2 9 5 6 6 0 8 8 9 9\n",
      " 2 9 4 0 0 0 9 8 7 4 0 3 1 4 0 5 5 1 9 1 0 4 7 6 6 3 1 9 5 1 0 7 7 2 1 8 3\n",
      " 4 5 0 6 6 1 8 8 6 6 2 1 5 2 6 8 2 9 3 2 1 7 1 0 5 3 3 5 9 1 6 3 7 5 4 4 9\n",
      " 0 7 2 8 7 2 0 3 9 4 4 4 1 7 4 1 6 9 5 1 1 3 6 9 1 3 5 6 7 7 0 6 2 2 1 9 9\n",
      " 3 7 7 6 6 4 4 6 9 7 2 3 9 9 6 1 1 1 6 3 4 8 2 8 1 9 2 4 7 9 0 1 0 7 5 0 8\n",
      " 0 2 3 5 7 7 6 8 1 3 4 1 0 7 3 1 5 7 8 7 9 4 9 4 0 2 1 1 8 8 3 0 3 2 1 3 1\n",
      " 2 6 6 1 6 1 3 1 5 4 2 5 4 5 3 2 9 7 0 9 6 7 2 5 9 9 9 0 6 2 4 3 2 3 8 7 8\n",
      " 3 7 4 0 1 8 2 8 8 7 1 8 1 8 3 3 5 7 3 7 6 7 2 1 6 2 2 0 1 6 2 6 3 6 7 0 6\n",
      " 6 5 0 7 8 5 4 4 6 2 0 2 2 6 1 6 7 9 7 0 3 4 2 5 9 4 1 6 4 7 6 9 5 2 4 5 2\n",
      " 9] [6 7 6 0 8 9 3 0 9 3 0 7 2 5 3 8 2 7 1 4 5 1 2 2 5 1 3 6 5 3 0 2 4 9 6 7 4\n",
      " 9 6 9 9 1 1 2 0 5 5 8 2 0 4 3 9 2 9 7 6 5 7 6 2 1 6 9 9 1 8 4 2 6 8 4 3 8\n",
      " 0 0 0 5 6 0 7 3 7 3 1 4 3 0 3 3 9 1 2 9 8 1 1 0 3 3 9 8 6 9 2 0 8 3 4 9 3\n",
      " 2 2 8 3 4 1 5 6 9 9 7 9 1 5 4 1 5 1 0 1 1 0 0 3 9 8 1 1 5 4 6 1 1 0 5 1 3\n",
      " 8 5 8 8 1 0 7 9 3 5 9 5 3 2 8 4 8 0 7 8 9 9 0 6 9 6 2 1 1 0 8 6 1 8 7 5 0\n",
      " 2 0 5 3 4 9 9 6 4 5 8 1 2 1 1 0 7 9 5 0 0 2 2 9 9 7 6 1 3 9 8 1 4 6 1 3 1\n",
      " 5 9 5 6 5 5 7 4 8 7 1 2 2 8 7 9 9 0 8 9 8 2 7 5 2 0 3 2 5 4 3 3 2 7 2 6 2\n",
      " 1 5 1 4 9 9 6 5 6 1 5 2 5 5 0 0 6 3 9 4 8 5 2 3 4 9 3 4 9 7 0 5 2 9 3 3 1\n",
      " 6 3 2 4 7 5 9 8 2 6 1 8 9 7 7 9 7 1 4 6 4 5 4 4 0 2 0 4 0 9 8 6 8 6 1 8 6\n",
      " 8 4 3 4 2 3 0 4 7 0 5 1 9 6 4 4 9 3 6 3 0 4 2 3 5 9 0 0 3 0 8 9 6 2 3 7 2\n",
      " 9 6 8 5 5 5 2 9 7 0 0 4 1 5 3 9 4 5 8 2 9 9 2 5 8 6 2 2 8 5 4 0 6 7 5 0 7\n",
      " 6 6 0 5 5 8 3 0 8 3 0 2 1 5 6 3 3 2 3 5 8 8 5 9 0 2 6 3 1 8 5 9 3 2 6 1 7\n",
      " 0 3 4 6 0 4 2 1 4 7 0 6 1 8 3 8 5 1 5 2 7 4 1 5 3 0 8 7 6 5 2 1 6 0 6 4 9\n",
      " 1 3 7 1 0 4 2 9 6 7 0 5 7 3 2 2 3 3 2 9 1 9 6 4 4 8 0 2 5 1 3 8 0 6 2 6 7\n",
      " 4 7 9 0 7 9 1 0 4 4 0 3 6 6 0 9 9 7 7 6 2 3 7 2 2 2 9 0 5 0 1 5 3 8 8 7 9\n",
      " 3 1 1 4 1 5 9 2 7 8 5 0 9 3 8 3 8 5 9 7 3 6 0 3 3 5 4 5 6 3 2 2 5 5 4 8 1\n",
      " 5 0 7 4 5 8 9 0 7 6 8 4 4 1 3 4 8 8 5 5 2 7 9 9 2 1 7 3 2 1 7 3 9 1 5 0 9\n",
      " 7 7 0 6 9 4 9 9 9 4 4 7 4 1 9 2 6 7 5 1 5 1 3 9 6 7 2 5 8 9 8 1 1 9 3 3 1\n",
      " 8 6 3 1 2 0 3 3 3 5 7 1 6 0 9 2 9 8 1 0 6 3 9 4 0 0 8 8 9 5 6 6 0 8 8 9 9\n",
      " 2 9 4 0 0 0 9 8 7 4 0 3 1 4 0 5 5 1 9 1 5 8 7 6 6 3 1 9 4 1 0 7 4 8 8 8 3\n",
      " 4 5 0 6 6 1 8 0 6 6 2 1 5 2 6 8 2 9 3 2 1 7 1 0 5 8 3 5 9 1 6 9 7 6 4 4 9\n",
      " 0 9 6 8 7 2 0 5 7 4 4 9 1 7 4 1 6 9 5 1 1 3 6 9 1 2 5 2 7 9 0 6 7 2 1 9 4\n",
      " 3 7 7 6 5 4 4 6 4 7 2 2 9 9 6 1 1 1 5 9 2 8 2 8 2 9 4 4 7 9 2 1 0 7 5 0 4\n",
      " 0 5 3 5 7 7 6 8 1 3 4 1 0 7 3 1 5 7 8 7 7 4 9 4 0 2 1 1 8 8 3 0 3 4 1 3 1\n",
      " 2 6 6 1 6 1 3 1 5 4 2 5 4 3 3 2 7 7 0 9 6 7 2 5 9 9 9 0 6 2 4 3 2 3 8 7 0\n",
      " 3 7 4 7 1 8 8 8 3 7 1 8 9 8 3 3 5 7 3 7 6 7 2 1 6 2 2 0 1 6 6 6 3 6 7 0 6\n",
      " 2 8 0 7 8 5 2 4 6 2 0 2 2 6 1 6 7 9 7 0 5 4 2 3 9 4 1 6 4 7 6 9 5 2 4 5 2\n",
      " 9]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.848"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dev_predictions= make_predictions(X_dev, W1, b1, W2, b2)\n",
    "get_accuracy(dev_predictions,Y_dev)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 3147,
     "sourceId": 5196,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31040,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 46.72109,
   "end_time": "2025-08-28T17:06:50.551248",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-28T17:06:03.830158",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
